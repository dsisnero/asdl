require 'pathname'
require_relative 'asdl_c'
require_relative 'parser'

module ASDL

  class App

    def auto_gen_message(genfile="asdl_c.rb")
      "/* File automatically generated by #{genfile}. */\n\n"
    end


    def generate(srcfile, inc_dir: nil, src_dir: nil)
      mod = ASDL::Parser.parse(srcfile)
      inc_dir = inc_dir ? Pathname(inc_dir) : Pathname.getwd
      src_dir = src_dir ? Pathname(src_dir) : Pathname.getwd

      file = inc_dir + "#{mod.name}-ast.h"
      File.open(file,'w') do |f|
        f.write(auto_gen_message)
        f.write %[#include "asdl.h"\n\n]
        c = ASDL.chain_of_visitors(
          TypeDefVisitor.new(f),
          StructVisitor.new(f),
          PrototypeVisitor.new(f),
        )
        c.visit(mod)
        f.write("PyObject* PyAST_mod2obj(mod_ty t);\n")
        f.write("mod_ty PyAST_obj2mod(PyObject* ast, PyArena* arena, int mode);\n")
        f.write("int PyAST_Check(PyObject* obj);\n")
      end

      gen_src = src_dir + "#{mod.name}-ast.c"
      File.open(gen_src, 'w') do |f|
        f.write(auto_gen_message)
        f.write %[#include <stdef.h>\n]
        f.write("\n")
        f.write %[#include "Python.h"\n]
        f.write %[#include "#{mod.name}-ast.h"\n]
        f.write("\n")
        f.write("static PyTypeObject AST_type;\n")
        v = ASDL.chain_of_visitors(
          Obj2ModPrototypeVisitor.new(f),
          FunctionVisitor.new(f),
          Obj2ModVisitor.new(f),
        )
        v.visit(mod)
      end

    end

  end

end

if $0 == __FILE__

  app = ASDL::App.new
  require 'pry'
  src = ARGV[0]
  raise 'Need a ASDL src' unless src
  #binding.pry
  app.generate(src)

end
